Hierarchical structre
Topic [subtopic...] Page
  -Each topic/sub-topic will be a directory, whose name is the one that will appear
  in the URL. Pages will also be directories - see below for example
Page specified as a yaml file with the following fields
- variables
  The variables to be passed on to the templating engine
  - title
  - extra body content
  - extra head content
  - extra style content
  - extra style files
  - js script files
- auth
  This can be specified as a list of users, including anon user, that can access
  the page
- template to use (will default to nice looking website, possibly using bootstrap)
- tags/keywords
  This could be used to facilitate a search feature
- content
  This can be markdown that will be rendered as the main content of
  the page using a templating engine. This can be the actual contents as a string

maths/
maths/index.md
maths/calculus/index.md
maths/calculus/limits/
maths/calculus/limits/index.md
maths/calculus/limits/graph1.png
maths/calculus/limits/graph2.png
maths/calculus/limits/graph3.png
maths/calculus/limits/applet.js
maths/calculus/limits/source.zip
maths/calculus/intro.md

Here maths is top level topic, calculus sub-topic, and limits the page

Modules:
Build HTML to actually render
  - See if file has been cached
  - Get json file from URL
    Split the URL by / to get topics, sub-topics and page name. Add index.json
    on the end and load the file
  - Parse json file
    Get the relevant bits from json file, convert markdown to html, get template
    to use
  - Check the user is authorised to view the page
  - Render template to a file and cache it by storing url/filename in a cache file

Indexing:
Go through topics recursively to build an index of pages - a page is a directory
that contains an index.md file

[
    (title="maths", children=[
        (title="calculus", children=[
            (title="intro", children=[]),
            (title="limits", children=[])
        ]),
        (title="matrix", children=[])
    ])
    (title="home", children=[])
]


--------------------------------------------------------------------------------
Site class
  - Store directories to content, templates, configs
  - Get site index
    - Each page is represented as a dict with keys: title, url, path, children.
      If the page is an index page there will be a flag present (in which case
      path may not exist)
    - Have a copy of flattened version (?)
  - Deal with caching (later)

Global config:
 - default_page

Get site object
When handling a request:
   - Find page in site index by URL provided
   - Load default_page_config from the global config
   - Add relevant parts of site index to default config
   - Add default title to config
   - Create Page object based on filepath, passing in config
   - In Page constructor:
     - If page config has base_config present, load a Page object for the base file
       (only load config section, not content) and merge config
     - Merge config from file specified
     - Replace custom elements with real ones
     - Convert content from markdown to HTML
   - Render page


 Things to do:
  Improve generate_index().
  - Get full recursive listing
  - Look at all .md files
  - Create page for file, stripping index.md off if necessary
  - Go back through file path and create pages for all dirs above
  - Insert page at the correct position